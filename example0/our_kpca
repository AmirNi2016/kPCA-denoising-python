from scipy.spatial.distance import pdist, squareform
from scipy.linalg import eigh
import numpy as np

# How to compute matrix K ?

class kPCA():
    M = 0  # Number of samples
    N = 0  # Dimensionality

    def __init__(self, train_data):
        """
        train_data: (number of samples)x(dimension of samples), i.e. each row
        is a sample
        """
        self.X = train_data
        self.M = np.size(train_data, 0)
        self.N = np.size(train_data, 1)

    def algorithm(self, n, c):
        """
        TODO: CONTINUE FROM HERE
        """
        K = self.obtain_kernel_matrix(n, c)
        lambda_, alpha = eigh(K)
        alpha_sorted = np.column_stack(
            (alpha[:, -i] for i in range(1, n + 1)))
        return 0

    def obtain_kernel_matrix(self, n, c):
        """
        Inputs
            n, c: parameters for RBF Kernel function
        Outputs
            Obtains the K matrix, where the coefficient K_ij = phi(xi)*phi(xj)
        """
        # Compute euclidean distances between all samples, store values in a
        # matrix
        dist_X = pdist(self.X, 'sqeuclidean')
        # Square the distances
        sqdist_X = squareform(dist_X)
        # Apply Kernel to each value
        K = np.exp(-sqdist_X/(n*c))
        return self.center_kernel_matrix(K)

    def center_kernel_matrix(self, K):
        """
        Input
            non-centered Kernel matrix
        Output
            centered Kernel matrix

        Code inspired in [1], Appendix D.2.2
        """
        l = K.shape[0]
        one_l = np.ones((l, l)) / l
        K = K - one_l.dot(K) - K.dot(one_l) + one_l.dot(K).dot(one_l)
        return K


"""
References

[1] Schoelkopf, Bernhard, Support vector learning, 1997
"""